// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// This is your Prisma schema file.
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  username  String   @unique
  password  String
  avatar    String?
  role      Role     @default(USER)
  score     Int      @default(0)
  level     Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  createdRooms Room[] @relation("RoomCreator")
  joinedRooms  Room[] @relation("RoomGuest")
  gameResults  GameResult[]

  @@map("users")
}

model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  imageUrl    String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  cards Card[]

  @@map("categories")
}

model Card {
  id          String   @id @default(cuid())
  name        String
  description String?
  imageUrl    String?
  hints       String[] // Array of hints
  difficulty  Int      @default(1) // 1-5 difficulty level
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  categoryId String
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  gameCards  GameCard[]

  @@map("cards")
}

model Room {
  id          String     @id @default(cuid())
  name        String
  isActive    Boolean    @default(true)
  maxPlayers  Int        @default(2)
  status      RoomStatus @default(WAITING)
  settings    Json? // Game settings like rounds, time per round, etc.
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // Relations
  creatorId String
  creator   User   @relation("RoomCreator", fields: [creatorId], references: [id])
  guestId   String?
  guest     User?  @relation("RoomGuest", fields: [guestId], references: [id])

  games Game[]

  @@map("rooms")
}

model Game {
  id          String     @id @default(cuid())
  status      GameStatus @default(PREPARING)
  currentRound Int       @default(1)
  maxRounds   Int        @default(5)
  timePerRound Int       @default(60) // seconds
  startedAt   DateTime?
  endedAt     DateTime?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // Relations
  roomId String
  room   Room   @relation(fields: [roomId], references: [id], onDelete: Cascade)

  gameCards   GameCard[]
  gameResults GameResult[]

  @@map("games")
}

model GameCard {
  id        String   @id @default(cuid())
  round     Int
  isGuessed Boolean  @default(false)
  guessedBy String? // User ID who guessed correctly
  createdAt DateTime @default(now())

  // Relations
  gameId String
  game   Game   @relation(fields: [gameId], references: [id], onDelete: Cascade)
  cardId String
  card   Card   @relation(fields: [cardId], references: [id])

  @@unique([gameId, round])
  @@map("game_cards")
}

model GameResult {
  id          String   @id @default(cuid())
  score       Int      @default(0)
  correctGuesses Int   @default(0)
  totalRounds Int      @default(0)
  position    Int? // 1st, 2nd place
  createdAt   DateTime @default(now())

  // Relations
  gameId String
  game   Game   @relation(fields: [gameId], references: [id], onDelete: Cascade)
  userId String
  user   User   @relation(fields: [userId], references: [id])

  @@unique([gameId, userId])
  @@map("game_results")
}

enum RoomStatus {
  WAITING
  PLAYING
  FINISHED
}

enum GameStatus {
  PREPARING
  IN_PROGRESS
  PAUSED
  FINISHED
  CANCELLED
}

enum Role {
  USER
  ADMIN
}
